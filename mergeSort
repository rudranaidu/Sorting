   static ArrayList<Integer> merge_sort(ArrayList<Integer> arr) {
        // Write your code here.
        int size = arr.size();
        int left = 0;
        int right = size-1;
        ArrayList<Integer> sortedArray = merge_sortHelper(arr, left, right);
        return sortedArray;
    }

    static ArrayList<Integer> merge_sortHelper (ArrayList<Integer> arr, int left, int right) {
          if(left == right) {
              return arr;
            }
           int mid = (left + right)/2;
           merge_sortHelper(arr, left, mid);
           merge_sortHelper(arr, mid+1, right);
           ArrayList<Integer> mergedArray = new ArrayList<Integer>(arr.size());
           int i = left; int j = mid+1;
           while(i <=  mid && j<= right) {
               if (arr.get(i) <= arr.get(j)) {
                   mergedArray.add(arr.get(i));
                   i++;               
               } else {
                   mergedArray.add(arr.get(j));
                   j++;
               }
           }
            while (i<= mid) {
                mergedArray.add(arr.get(i));
                i++;
            }       
            while (j< right) {
                mergedArray.add(arr.get(j));
                j++;
            }     
            //copying merged array back to original array.    
           for (int k = left, m= 0; k <= right && m< mergedArray.size() ; k++, m++) {
               arr.set(k, mergedArray.get(m));
           }
           return arr;
    }

Time complexity : O(n logn)

Logn -> every time we are dividing the array into two halves
n -> merging n elements.

Merge sort achieves this time complexity because it recursively divides the array into halves until each subarray has only one element (the base case),
and then it merges the sorted subarrays together. The merging operation takes O(n) time
