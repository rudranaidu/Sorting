we use Decrese and conquer design strategy to solve this.

in Decrease and conquer, we solve 1 subproblem each time and left remaining n-1 problems to other workers to solve

this is bottom up approach.
we are inserting right most element in correct position at each pass

in insertion sort, shifting of numbers happen from right  by taking right most element in temp variable.
finally this temp variable will be in correct posistion in array.

instead of repeated swaps , shifting value to right is better becuase shifting values involves 3 elementary operations.


Remember , we write the code based on arbitary index i

public static ArrayList<Integer> insertion_sort(ArrayList<Integer> arr) {
        int size = arr.size();
        for (int i = 1; i < size; i++) {
            int temp = arr.get(i);
            int index = i - 1;

            // Change '&' to '&&' in the while condition
            while (index >= 0 && arr.get(index) > temp) {
                arr.set(index + 1, arr.get(index)); 
                index--;
            }
            arr.set(index + 1, temp);
        }
        return arr;
    }
